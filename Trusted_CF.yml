AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CustomerName:
    Type: String
    Description: Customer-1
 
Resources:
  # S3 Bucket Creation
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Bucket Policy to allow public access
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  # Custom Resource for index.html upload
  S3BucketIndexHtml:
    Type: 'Custom::S3Object'
    Properties:
      ServiceToken: !GetAtt S3BucketFunction.Arn
      BucketName: !Ref S3Bucket
      Key: 'index.html'
      Content: !Sub |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
            <link rel="stylesheet" href="index.css">
            <script src="index.js"></script>
            <title>Amazon Connect Metrics for ${CustomerName}</title>
        </head>
        <body>
            <div class="container">
                <div class="row">
                    <div class="col-sm m-1">
                        <section style="text-align: center">
                            <p>Amazon Connect Metrics for ${CustomerName}</p>
                            <br><br>
                        </section>
                    </div>
                </div>
                <div class="row justify-content-center">
                        <div class="col">
                            <form>
                                <div class="form-group">
                                <label for="timeframeLength">Duration:</label>
                                <input type="number" min="1" max="100" onkeypress="return event.charCode >= 48" class="form-control" id="timeframeLength" aria-describedby="timeframeLength" placeholder="2" oninput="enableButton()">
                                </div>
                            </form>
                        </div>
                        <div class="col">
                            <label for="timeframeUnit">Unit of time:</label>
                            <select name="timeframeUnit" id="timeframeUnit" class="custom-select">
                                <option selected>Weeks</option>
                                <option value="minutes">Minutes</option>
                                <option value="hours">Hours</option>
                                <option value="days">Days</option>
                            </select>
                        </div>
                        <div class="col" style="display: flex; justify-content: center; align-items: center;">
                            <button type="button" class="btn btn-secondary btn-block" style="margin-top: 13px;" id="customTimeButton" onClick="submitCustomTimeframe()" disabled>Go</button>
                        </div>
                </div>
            </div>
        
            <div class="container">
                <div class="row justify-content-center" id="sectionResults">
                    <section style="text-align: center" class="row loading">
                
                    </section>
                </div>
                <div class="row">
                    <section class="col" id="results">
                
                    </section>
                </div>
            </div>
        
            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        </body>
        </html>
      ContentType: 'text/html'

  S3BucketIndexCss:
    Type: 'Custom::S3Object'
    Properties:
      ServiceToken: !GetAtt S3BucketFunction.Arn
      BucketName: !Ref S3Bucket
      Key: 'index.css'
      Content: |
        /* table, th, td {
            border: 1px solid black;
        } */
        th, td {
            padding: 5px;
            text-align: center;
        }

        p {
            font-size: 20px;
        }

        #timeframeLength:focus::placeholder {
            color: transparent;
        }
      ContentType: 'text/css'

  S3BucketIndexJs:
    Type: 'Custom::S3Object'
    Properties:
      ServiceToken: !GetAtt S3BucketFunction.Arn
      BucketName: !Ref S3Bucket
      Key: 'index.js'
      Content: |
        async function initialFetchCloudWatchData() {
            let baseURL = "https://gbpubojrak.execute-api.us-east-1.amazonaws.com/testing/yamlcloudwatchtest";
            try {
                let response = await fetch(baseURL);
                if (!response.ok) {
                    return {
                        "errorMessage": response,
                        "result": false
                    }
                } else {
                    let cloudWatchData = await response.json();
                    return {
                        "data": cloudWatchData,
                        "result": true
                    }
                }
            } catch (err) {
                return {
                    "errorMessage": err,
                    "result": false
                }
            }

        }

        async function customTimeFetchCloudWatchData(timeframeLength, timeframeUnit) {
            let baseURL = "https://gbpubojrak.execute-api.us-east-1.amazonaws.com/testing/yamlcloudwatchtest";
            let timeframeLengthParam = `/?timeframeLength=${timeframeLength}&`;
            let timeframeUnitParam = `timeframeUnit=${timeframeUnit}`;
            let paramURL = baseURL + timeframeLengthParam + timeframeUnitParam;
            try {
                let response = await fetch(paramURL);
                    if (!response.ok) {
                        return {
                            "errorMessage": response,
                            "result": false
                        }
                    } else {
                        let cloudWatchData = await response.json();
                        return {
                            "data": cloudWatchData,
                            "result": true
                        }
                    }
                } catch (err) {
                    return {
                        "errorMessage": err,
                        "result": false
                    }
                }
        }

        function cleanMetricName(metricName) {
            let cleanMetricName = metricName.replace(/_/g, ' ').split(' ');
            cleanMetricName = cleanMetricName.map(word => word.charAt(0).toUpperCase() + word.slice(1));    
            return cleanMetricName.join(' ');
        }

        function createTable(data) {
            let metricLabel = cleanMetricName(data.Id)

            let table = document.createElement("table");
            let tableRow = document.createElement("tr");
            table.style.margin = "10px";
            let tableHeader = document.createElement("th");
            tableHeader.innerHTML = "Metric Name";
            table.appendChild(tableRow);
            tableRow.appendChild(tableHeader);
            data.Timestamps.forEach(timestamp => {
                let header = document.createElement("th");
                header.innerHTML = timestamp;
                tableRow.appendChild(header);
            })
            let results = document.querySelector("#results");
            results.appendChild(table)

            let dataRow = document.createElement("tr");
            table.appendChild(dataRow);
            let metricLabelRow = document.createElement("td");
            metricLabelRow.innerHTML = metricLabel;
            dataRow.appendChild(metricLabelRow);
            data.Values.forEach(value => {
                let row = document.createElement("td");
                row.innerHTML = value;
                dataRow.appendChild(row);
            })
        }

        function newCreateTable(data) {
            let metricLabel = cleanMetricName(data.Id);
            let tableWrapper = document.createElement("div");
            tableWrapper.setAttribute("class", "table-responsive");
            let table = document.createElement("table");
            table.setAttribute("class", "table");
            let tableHead = document.createElement("thead");
            let headerRow = document.createElement("tr");
            tableHead.appendChild(headerRow);
            let tableRowMetricName = document.createElement("th");
            tableRowMetricName.setAttribute("scope", "col");
            tableRowMetricName.setAttribute("style", "text-decoration: underline;");
            tableRowMetricName.innerHTML = "Metric Name";
            headerRow.appendChild(tableRowMetricName);
            data.Timestamps.forEach(timestamp => {
                let header = document.createElement("th");
                header.setAttribute("scope", "col");
                header.innerHTML = timestamp;
                headerRow.appendChild(header);
            })
            table.appendChild(tableHead);
            tableWrapper.appendChild(table);
            let results = document.querySelector("#results");
            results.appendChild(tableWrapper);

            let tableBody = document.createElement("tbody");
            let columnRow = document.createElement("tr");
            tableBody.appendChild(columnRow);
            table.appendChild(tableBody);
            let rowHeader = document.createElement("th");
            rowHeader.setAttribute("scope", "row");
            rowHeader.innerHTML = metricLabel;
            columnRow.appendChild(rowHeader);
            data.Values.forEach(value => {
                let row = document.createElement("td");
                row.innerHTML = value;
                columnRow.appendChild(row);
            })
            table.appendChild(tableBody);

        }

        async function displayMetricTableData() {
            let loadingModal = document.createElement("p");
            loadingModal.innerHTML = "loading . . .";
            let sectionHeader = document.querySelector(".loading");
            sectionHeader.append(loadingModal);
            let data = await initialFetchCloudWatchData();
            if (!data.result) {
                sectionHeader.removeChild(loadingModal);
                let error = document.createElement("p");
                error.innerHTML = `Error: ${data.errorMessage.status}`;
                sectionHeader.appendChild(error);
                return
            } else {
                sectionHeader.removeChild(loadingModal);
                let metricDataResults = data.data.MetricDataResults.length;
                for (let i = 0; i < metricDataResults; i++) {
                    newCreateTable(data.data.MetricDataResults[i])
                }
            }

        }

        document.addEventListener("DOMContentLoaded", function() {
            displayMetricTableData();
        })
        async function submitCustomTimeframe() {
            let timeframeLength = document.querySelector("#timeframeLength").value;
            let timeframeUnit = document.querySelector("#timeframeUnit").value.toLowerCase();
            let loadingModal = document.createElement("p");
            loadingModal.innerHTML = "loading . . .";
            let sectionHeader = document.querySelector(".loading");
            sectionHeader.append(loadingModal);
            let data = await customTimeFetchCloudWatchData(timeframeLength, timeframeUnit);
            if (!data.result) {
                sectionHeader.removeChild(loadingModal);
                let error = document.createElement("p");
                error.innerHTML = `Error: ${data.errorMessage.status}`;
                sectionHeader.appendChild(error);
                return
            } else {
                sectionHeader.removeChild(loadingModal);
                let results = document.querySelector("#results");
                results.remove();
                let newResults = document.querySelector("#sectionResults");
                let section = document.createElement("section");
                section.setAttribute("class", "col");
                section.setAttribute("id", "results");
                newResults.appendChild(section);
                let metricDataResults = data.data.MetricDataResults.length;
                for (let i = 0; i < metricDataResults; i++) {
                    newCreateTable(data.data.MetricDataResults[i])
                }
            }

        }

        function enableButton() {
            let button = document.querySelector("#customTimeButton")
            let inputValue = document.querySelector("#timeframeLength").value;
            if (inputValue && inputValue >= 1 && inputValue <= 100) {
                button.disabled = false;
                button.classList.remove("btn-secondary")
                button.classList.add("btn-primary")
            } else {
                button.disabled = true;
                button.classList.remove("btn-primary")
                button.classList.add("btn-secondary")
            }
        }
      ContentType: 'application/javascript'

  # Lambda Function to handle the custom resource
  S3BucketFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              s3 = boto3.client('s3')
              bucket = event['ResourceProperties']['BucketName']
              key = event['ResourceProperties']['Key']
              content = event['ResourceProperties']['Content']
              content_type = event['ResourceProperties']['ContentType']
              s3.put_object(Bucket=bucket, Key=key, Body=content, ContentType=content_type)
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: 'python3.9'
      Timeout: 30

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'S3AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - S3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content
